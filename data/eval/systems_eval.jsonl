{"prompt": "Explain the differences between epoll and kqueue for high-performance network servers.", "response": "epoll (Linux) and kqueue (BSD/macOS) are both scalable I/O event notification mechanisms, but differ in design:\n\n**epoll:**\n- Edge-triggered and level-triggered modes\n- Uses file descriptors: epoll_create(), epoll_ctl(), epoll_wait()\n- Better for large numbers of mostly-idle connections\n- O(1) performance for add/remove/modify operations\n\n**kqueue:**\n- More general event system (not just I/O)\n- Uses kevent() system call\n- Can monitor files, processes, signals, timers\n- Slightly more complex API but more flexible\n\n**Trade-offs:**\n- epoll: Linux-only, simpler for network I/O\n- kqueue: More portable across BSDs, more feature-rich\n- Both outperform select/poll for >1000 concurrent connections\n\nFor cross-platform code, use libraries like libuv or libev that abstract these differences."}
{"prompt": "Design a Redis cluster setup for handling high write loads with failover capabilities.", "response": "Here's a robust Redis cluster design for high write loads:\n\n**Architecture:**\n1. **Redis Cluster Mode**: 6+ nodes (3 masters, 3 replicas minimum)\n2. **Sharding**: Data automatically partitioned across masters using hash slots (16384 total)\n3. **Replication**: Each master has 1+ replicas for failover\n\n**Configuration:**\n```\n# redis.conf key settings\ncluster-enabled yes\ncluster-config-file nodes.conf\ncluster-node-timeout 5000\nappendonly yes\nappendfsync everysec\n```\n\n**Write Optimization:**\n- Use pipelining for batch operations\n- Configure appropriate `maxmemory-policy` (allkeys-lru)\n- Tune `tcp-keepalive` and `timeout` settings\n- Consider Redis 6.0+ threaded I/O\n\n**Failover:**\n- Automatic failover when majority nodes detect master failure\n- Manual failover: `CLUSTER FAILOVER`\n- Monitor with Redis Sentinel for additional reliability\n\n**Monitoring:**\n- Track `instantaneous_ops_per_sec`, `used_memory`, `keyspace_misses`\n- Set up alerts for node failures and high latency\n\nThis setup handles node failures gracefully while maintaining write performance."}
